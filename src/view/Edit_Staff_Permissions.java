/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import model.MySQL;

/**
 *
 * @author mohan
 */
public class Edit_Staff_Permissions extends javax.swing.JPanel {

    /**
     * Creates new form Edit_Staff_Permissions
     */
    private HashMap<String, String> roleMap = new HashMap<>();

    public Edit_Staff_Permissions() {
        initComponents();
        loadRole();
    }
    
//    String staffId;
//     public Edit_Staff_Permissions(String id) {
//        initComponents();
//        loadRole();
//        this.staffId = id;
//    }

    private void loadRole() {
        try {
            ResultSet resultSet = MySQL.execute("SELECT * FROM `roles`");
            Vector v = new Vector();
            v.add("Select");

            while (resultSet.next()) {
                v.add(resultSet.getString("role_name"));
                roleMap.put(resultSet.getString("role_name"), resultSet.getString("role_id"));
            }

            DefaultComboBoxModel model = (DefaultComboBoxModel) roleComboBox.getModel();
            model.removeAllElements();

            model.addAll(v);
            roleComboBox.setSelectedIndex(0);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        roleComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        jCheckBox2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jCheckBox2.setText("Patient");

        jCheckBox3.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jCheckBox3.setText("Appointments");

        jCheckBox4.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jCheckBox4.setText("Pharmacy ");

        jCheckBox5.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jCheckBox5.setText("Billing & Invoicing");

        jCheckBox6.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jCheckBox6.setText("Medical Reports");

        jCheckBox7.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jCheckBox7.setText("Staff Management");

        jButton1.setBackground(new java.awt.Color(0, 150, 136));
        jButton1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        roleComboBox.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        roleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        roleComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                roleComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox7, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roleComboBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox7)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2))
        );

        jLabel1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Edit Staff Permissions");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       
        String role = (String) roleComboBox.getSelectedItem();
        System.out.println(role);
        String roleId = roleMap.get(role);

        try {
            if (role != null && !"Select".equals(role) && !"null".equals(role)) {
                
                MySQL.execute("DELETE FROM roles_has_permissions WHERE roles_role_id = '" + roleId + "'");


                StringBuilder insertQuery = new StringBuilder();
                insertQuery.append("INSERT INTO roles_has_permissions (roles_role_id, permissions_permission_id) VALUES ");

                List<String> values = new ArrayList<>();

                if (jCheckBox2.isSelected()) {
                    values.add("('" + roleId + "', (SELECT permission_id FROM permissions WHERE permission_name = 'Patient'))");
                }
                if (jCheckBox3.isSelected()) {
                    values.add("('" + roleId + "', (SELECT permission_id FROM permissions WHERE permission_name = 'Appointments'))");
                }
                if (jCheckBox4.isSelected()) {
                    values.add("('" + roleId + "', (SELECT permission_id FROM permissions WHERE permission_name = 'Pharmacy'))");
                }
                if (jCheckBox5.isSelected()) {
                    values.add("('" + roleId + "', (SELECT permission_id FROM permissions WHERE permission_name = 'Billing & Invoicing'))");
                }
                if (jCheckBox6.isSelected()) {
                    values.add("('" + roleId + "', (SELECT permission_id FROM permissions WHERE permission_name = 'Medical Reports'))");
                }
                if (jCheckBox7.isSelected()) {
                    values.add("('" + roleId + "', (SELECT permission_id FROM permissions WHERE permission_name = 'Staff Management'))");
                }

                // Only execute insert if at least one permission is selected
                if (!values.isEmpty()) {
                    insertQuery.append(String.join(", ", values));
                    MySQL.execute(insertQuery.toString());
                    JOptionPane.showMessageDialog(this, "Permissions updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No permissions selected. All permissions removed for this role.", "Info", JOptionPane.INFORMATION_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Please Select Role", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating permissions: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void roleComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_roleComboBoxItemStateChanged

        resetAllCheckboxes();
        String role = (String) roleComboBox.getSelectedItem();

        try {
            if (role != null && !"Select".equals(role) && !"null".equals(role)) {
                ResultSet resultSet = MySQL.execute("SELECT "
                        + "    r.role_id,"
                        + "    r.role_name,"
                        + "    p.permission_id,"
                        + "    p.permission_name "
                        + "FROM roles r "
                        + "INNER JOIN roles_has_permissions rp ON r.role_id = rp.roles_role_id "
                        + "INNER JOIN permissions p ON rp.permissions_permission_id = p.permission_id "
                        + "WHERE r.role_name = '" + role + "'"
                        + "ORDER BY p.permission_id;");

                while (resultSet != null && resultSet.next()) {
                    System.out.println(resultSet.getString("p.permission_name"));
                    String permission = resultSet.getString("p.permission_name");

                    switch (permission) {
                        case "Patient":
                            jCheckBox2.setSelected(true);
                            break;
                        case "Appointments":
                            jCheckBox3.setSelected(true);
                            break;
                        case "Billing & Invoicing":
                            jCheckBox5.setSelected(true);
                            break;
                        case "Pharmacy":
                            jCheckBox4.setSelected(true);
                            break;
                        case "Medical Reports":
                            jCheckBox6.setSelected(true);
                            break;
                        case "Staff Management":
                            jCheckBox7.setSelected(true);
                            break;
                        default:
                            System.out.println("Unknown permission: " + permission);
                    }
                }
                resultSet.close();
            } else {
                resetAllCheckboxes();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_roleComboBoxItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        roleComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void resetAllCheckboxes() {
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
        jCheckBox5.setSelected(false);
        jCheckBox6.setSelected(false);
        jCheckBox7.setSelected(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> roleComboBox;
    // End of variables declaration//GEN-END:variables
}
